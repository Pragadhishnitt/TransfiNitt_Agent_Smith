services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: transfinitt_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  # Redis for AI Interviewer
  redis:
    image: redis:7-alpine
    container_name: transfinitt_redis
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  # Backend Service (Node.js) - Host Network for Email
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: transfinitt_backend
    environment:
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      AGENT_URL: ${AGENT_URL}
      PORT: ${BACKEND_PORT}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_APP_PASSWORD: ${EMAIL_APP_PASSWORD}
      NODE_ENV: ${NODE_ENV}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
    network_mode: host
    restart: unless-stopped

  # AI Interviewer Service (FastAPI Python) - Host Network
  ai_interviewer:
    build:
      context: ./ai_interviewer
      dockerfile: Dockerfile
    container_name: transfinitt_ai_interviewer
    environment:
      CEREBRAS_API_KEY: ${CEREBRAS_API_KEY}
      GROQ_API_KEY: ${GROQ_API_KEY}
      DATABASE_URL: ${SUPABASE_DATABASE_URL}
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_KEY: ${SUPABASE_KEY}
      SUPABASE_JWT_SECRET: ${SUPABASE_JWT_SECRET}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_DB: ${REDIS_DB}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      LANGCHAIN_TRACING_V2: ${LANGCHAIN_TRACING_V2}
      LANGCHAIN_ENDPOINT: ${LANGCHAIN_ENDPOINT}
      LANGCHAIN_API_KEY: ${LANGCHAIN_API_KEY}
      LANGCHAIN_PROJECT: ${LANGCHAIN_PROJECT}
    network_mode: host
    restart: unless-stopped

  # Researcher Dashboard (Frontend)
  researcher_dashboard:
    build:
      context: ./researcher-dashboard
      dockerfile: Dockerfile
    container_name: transfinitt_researcher_dashboard
    ports:
      - "3000:8090"
    depends_on:
      - backend
    networks:
      - app_network
    restart: unless-stopped
    environment:
      BACKEND_URL: ${BACKEND_URL}

  # Respondent Interview (Frontend)
  respondent_interview:
    build:
      context: ./respondent-interview
      dockerfile: Dockerfile
    container_name: transfinitt_respondent_interview
    ports:
      - "3001:8090"
    depends_on:
      - backend
      - ai_interviewer
    networks:
      - app_network
    restart: unless-stopped
    environment:
      BACKEND_URL: ${BACKEND_URL}

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: