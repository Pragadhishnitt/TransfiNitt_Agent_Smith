
services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: transfinitt_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
      - "5555:5555"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network
    restart: unless-stopped

  # Redis for AI Interviewer
  redis:
    image: redis:7-alpine
    container_name: transfinitt_redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network
    restart: unless-stopped

  # Backend Service (Node.js)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: transfinitt_backend
    environment:
      # PostgreSQL connection 
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      AGENT_URL: http://ai_interviewer:8001
      PORT: ${BACKEND_PORT:-8000}
      NODE_ENV: ${NODE_ENV:-development}
      # Email configuration (optional)
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_APP_PASSWORD: ${EMAIL_APP_PASSWORD}
      EMAIL_HOST: ${EMAIL_HOST:-smtp.gmail.com}
      EMAIL_PORT: ${EMAIL_PORT:-587}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app_network
    restart: unless-stopped
    command: sh -c "npx prisma migrate deploy && npx prisma generate && npm start"

  # AI Interviewer Service (FastAPI Python)
  ai_interviewer:
    build:
      context: ./ai_interviewer
      dockerfile: Dockerfile
    container_name: transfinitt_ai_interviewer
    environment:
      # AI API Keys
      GROQ_API_KEY: ${GROQ_API_KEY}
      CEREBRAS_API_KEY: ${CEREBRAS_API_KEY}
      # Redis connection 
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: ${REDIS_DB:-0}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      # Backend connection
      BACKEND_URL: http://backend:8000
      # LangChain (optional)
      LANGCHAIN_TRACING_V2: ${LANGCHAIN_TRACING_V2:-false}
      LANGCHAIN_ENDPOINT: ${LANGCHAIN_ENDPOINT:-}
      LANGCHAIN_API_KEY: ${LANGCHAIN_API_KEY:-}
      LANGCHAIN_PROJECT: ${LANGCHAIN_PROJECT:-}
    ports:
      - "8001:8001"
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - app_network
    restart: unless-stopped

  # Researcher Dashboard (Frontend)
  researcher_dashboard:
    build:
      context: ./researcher-dashboard
      dockerfile: Dockerfile
    container_name: transfinitt_researcher_dashboard
    environment:
      REACT_APP_BACKEND_URL: http://localhost:${BACKEND_PORT:-8000}
    ports:
      - "3000:8090"
    depends_on:
      - backend
    networks:
      - app_network
    restart: unless-stopped

  # Respondent Interview (Frontend)
  respondent_interview:
    build:
      context: ./respondent-interview
      dockerfile: Dockerfile
    container_name: transfinitt_respondent_interview
    environment:
      REACT_APP_BACKEND_URL: http://localhost:${BACKEND_PORT:-8000}
      REACT_APP_AI_AGENT_URL: http://localhost:8001
    ports:
      - "3001:8090"
    depends_on:
      - backend
      - ai_interviewer
    networks:
      - app_network
    restart: unless-stopped

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: